Vous recevrez votre mot de passe sur cette adresse email. Pas encore membre ? Inscrivez-vous gratuitement en 30s. Ce cours est visible gratuitement en ligne. Ce cours existe en livre papier. Vous pouvez obtenir un certificat de réussite à l'issue de ce cours. Vous pouvez être accompagné et mentoré par un professeur particulier par visioconférence sur ce cours. Exprimer un temps en informatique, cela soulève quelques questions. Il existe plusieurs façons de représenter des temps, que nous allons découvrir maintenant. Pour bien suivre ce chapitre, vous aurez besoin de maîtriser l'objet : savoir ce qu'est un objet et comment en créer un. Le moduletimeest sans doute le premier à être utilisé quand on souhaite manipuler des temps de façon simple. Services (c'est-à-dire les services communs aux différents systèmes d'exploitation). Ce n'est pas un hasard :timeest un module très proche du système. Cela signifie que certaines fonctions de ce module pourront avoir des résultats différents sur des systèmes différents. Pour ma part, je vais surtout m'attarder sur les fonctionnalités les plus génériques possibles afin de ne perdre personne. Python sur la bibliothèque standard et sur le module time, pour plus d'informations. Comment représenter un temps ? Il existe, naturellement, plusieurs réponses à cette question. Celle que nous allons voir ici est sans doute la moins compréhensible pour un humain, mais la plus adaptée à un ordinateur : on stocke la date et l'heure dans un seul entier. Comment représenter une date et une heure dans un unique entier ? L'idée retenue a été de représenter une date et une heure en fonction du nombre de secondes écoulées depuis une date précise. Unix, le 1er janvier 1970 à 00:00:00. Pourquoi cette date plutôt qu'une autre ? Il fallait bien choisir une date de début. L'année 1970 a été considérée comme un bon départ, compte tenu de l'essor qu'a pris l'informatique à partir de cette époque. D'autre part, un ordinateur est inévitablement limité quand il traite des entiers ; dans les langages de l'époque, il fallait tenir compte de ce fait tout simple : on ne pouvait pas compter un nombre de secondes trop important. Epoch ne pouvait donc pas être trop reculée dans le temps. Nous allons voir dans un premier temps comment afficher ce fameux nombre de secondes écoulées depuis le 1er janvier 1970 à 00:00:00. On utilise la fonctiontimedu moduletime. Cela fait beaucoup ! D'un autre côté, songez quand même que cela représente le nombre de secondes écoulées depuis plus de quarante ans à présent. Maintenant, je vous l'accorde, ce nombre n'est pas très compréhensible pour un humain. Vous pouvez remarquer que la valeur renvoyée partime. Le temps ainsi donné est plus précis qu'à une seconde près. Pour des calculs de performance, ce n'est en général pas cette fonction que l'on utilise. Mais c'est bien suffisant la plupart du temps. Vous allez me dire que c'est bien joli d'avoir tous nos temps réduits à des nombres mais que ce n'est pas très lisible pour nous. Nous allons découvrir tout au long de ce chapitre des moyens d'afficher nos temps de façon plus élégante et d'obtenir les diverses informations relatives à une date et une heure. Je vous propose ici un premier moyen : une sortie sous la forme d'un objet contenant déjà beaucoup d'informations. Nous allons utiliser la fonctionlocaltimedu moduletime. Comme toujours, si vous voulez en apprendre plus, je vous renvoie à la documentation officielle du moduletime. Comme je l'ai dit plus haut, nous allons utiliser la fonctionlocaltime. Elle prend un paramètre optionnel : le timestamp tel que nous l'avons découvert plus haut. Si ce paramètre n'est pas précisé,localtimeutilisera automatiquementtime. Pour savoir à quoi correspond chaque attribut de l'objet, je vous renvoie un peu plus haut. Pour l'essentiel, c'est assez clair je pense. Malgré tout, la date et l'heure renvoyées ne sont pas des plus lisibles. L'avantage de les avoir sous cette forme, c'est qu'on peut facilement extraire une information si on a juste besoin, par exemple, de l'année et du numéro du jour. Je vais passer plus vite sur cette fonction car, selon toute vraisemblance, vous l'utiliserez moins souvent. L'idée est, à partir d'une structure représentant les date et heure telles que renvoyées parlocaltime, de récupérer le timestamp correspondant. On utilise pour ce faire la fonctionmktime. C'est également une fonctionnalité intéressante, même si vous n'en voyez sans doute pas l'utilité de prime abord. La fonction qui nous intéresse estsleepet elle prend en paramètre un nombre de secondes qui peut être sous la forme d'un entier ou d'un flottant. Python se met en pause et vous devez attendre 3,5 secondes avant que les trois chevrons s'affichent à nouveau. Intéressons nous maintenant à la fonctionstrftime. Elle permet de formater une date et heure en la représentant dans une chaîne de caractères. La chaîne de formatage (nous verrons plus bas comment la former). Un temps optionnel tel que le renvoielocaltime. Si le temps n'est pas précisé, c'est la date et l'heure courantes qui sont utilisées par défaut. Pour construire notre chaîne de formatage, nous allons utiliser plusieurs caractères spéciaux. Python va remplacer ces caractères par leur valeur (la valeur du temps passé en second paramètre ou du temps actuel sinon). Eh oui. Mais avec ce que vous savez déjà et ce que vous allez voir par la suite, vous n'aurez pas de difficulté à personnaliser tout cela ! Le moduletimepropose bien d'autres fonctions. Je ne vous ai montré que celles que j'utilise le plus souvent tout en vous présentant quelques concepts du temps utilisé en informatique. Allez, je vous y encourage fortement donc je vous remets le lien vers la documentation du moduletime. Le moduledatetimepropose plusieurs classes pour représenter des dates et heures. Vous n'allez rien découvrir d'absolument spectaculaire dans cette section mais nous nous avançons petit à petit vers une façon de gérer les dates et heures qui est davantage orientée objet. Encore et toujours, je ne prétends pas remplacer la documentation. Je me contente d'extraire de celle-ci les informations qui me semblent les plus importantes. Je vous encourage, là encore, à jeter un coup d'œil du côté de la documentation du module datetime. Dans certains cas, on a juste besoin d'une date, c'est-à-dire un jour, un mois et une année. Il est naturellement possible d'extraire cette information de notre timestamp. Le moduledatetimepropose une classedate, représentant une date, rien qu'une date. L'objet possède trois attributs : year: l'année ; month: le mois ; day: le jour du mois. Comment fait-on pour construire notre objetdate? Il y a plusieurs façons de procéder. Le constructeur de cette classe prend trois arguments qui sont, dans l'ordre, l'année, le mois et le jour du mois. Il existe deux méthodes de classe qui peuvent vous intéresser : date. C'est moins courant mais on peut également être amené à manipuler une heure, indépendamment de toute date. La classetimedu moduledatetimeest là pour cela. On construit une heure avec non pas trois mais cinq paramètres, tous optionnels : hour(0 par défaut) : les heures, valeur comprise entre 0 et 23 ; minute(0 par défaut) : les minutes, valeur comprise entre 0 et 59 ; second(0 par défaut) : les secondes, valeur comprise entre 0 et 59 ; microsecond(0 par défaut) : la précision de l'heure en micro-secondes, entre 0 et 1. Nonepar défaut) : l'information de fuseau horaire (je ne détaillerai pas cette information ici). Cette classe est moins utilisée quedatetime. Je vous laisse faire quelques tests, n'oubliez pas de vous reporter à la documentation du moduledatetimepour plus d'informations. Et nous y voilà ! Vous n'allez pas être bien surpris par ce que nous allons aborder. Nous avons vu une manière de représenter une date, une manière de représenter une heure, mais on peut naturellement représenter une date et une heure dans le même objet, ce sera probablement la classe que vous utiliserez le plus souvent. Celle qui nous intéresse s'appelledatetime, comme son module. Elle prend d'abord les paramètres dedatetime. Voyons dès à présent les deux méthodes de classe que vous utiliserez le plus souvent : datetime. Il y a bien d'autres choses à voir dans ce moduledatetime. Si vous êtes curieux ou que vous avez des besoins plus spécifiques, que je n'aborde pas ici, référez-vous à la documentation officielle du module. Le moduletimepermet, entre autres, d'obtenir la date et l'heure de votre système. La fonctiontimedu moduletimerenvoie le timestamp actuel. La méthodelocaltimedu moduletimerenvoie un objet isolant les informations d'un timestamp (la date et l'heure). Le moduledatetimepermet de représenter des dates et heures. Très heureux de voir que nos cours vous plaisent, déjà 5 pages lues aujourd'hui ! Classrooms. C'est gratuit ! Vous pourrez aussi suivre votre avancement dans le cours, faire les exercices et discuter avec les autres membres.